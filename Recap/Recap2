In this second Sprint (Task 4 + 5 + 6), we worked with the MVC model + PaperClip + simple AJAX + GeoCoder . Here are some key points that would help you to summarise what you've learnt:

1) Room Model

$rails g model Room home_type:string room_type:string accommodate:integer bed_room:integer
bath_room:integer listing_name:string summary:text address:string
is_tv:boolean is_kitchen:boolean is_air:boolean is_heating:boolean
is_internet:boolean price:decimal active:boolean
user:references

1 User (as Host) can have Many Rooms:
  has_many :rooms

1 Room belong to 1 User (as Host):
  belongs_to :user


2) Install PaperClip
Install Homebrew:

ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
Install ImageMagick (or download from http://cactuslab.com/imagemagick/)

$brew install imagemagick
Gemfile:

gem 'paperclip'
References:
PaperClip on Github: https://github.com/thoughtbot/paperclip



3) Photo Model

$rails g model Photo room:references

1 Room can have Many Photos:
has_many :photos

1 Photo belong to 1 Room:
belongs_to :room



4) Simple AJAX
Photo Controller:
class PhotosController < ApplicationController
    def destroy
        ...
        respond_to :js
    end
end


Photo View:
...
<%= link_to photo, remote: true, method: :delete, data: {confirm: "Are you sure?"} do %>
        <i class="fa fa-times fa-lg"></i>
<% end %>
...
Javascript for AJAX action:
$('#photos').html("<%= j render 'photos/list' %>")

References:
AJAX in Rails: http://guides.rubyonrails.org/working_with_javascript_in_rails.html


5) GeoCoder
Gemfile:
gem 'geocoder'

Add extra fields into Room model:
$rails g migration AddFieldsToRoom latitude:float longitude:float

Room model:
geocoded_by :address
after_validation :geocode, if: :address_changed?


References:
Geocoder on Github: https://github.com/alexreisner/geocoder
